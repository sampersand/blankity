# Generated from lib/blankity/classes.rb with RBS::Inline

module Blankity
  # A Class which only defines +#to_i+; it implements RBS's +_ToI+ interface.
  class ToI < Blank
    @__value__: Integer

    # Creates a new instance; any additional arguments or block are passed to {Blank#initialize}.
    #
    # @rbs (Integer, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void
    def initialize: (Integer, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void

    # : () -> Integer
    def to_i: () -> Integer
  end

  # A Class which exclusively defines +#to_int+; it implements RBS's +_ToInt+ interface.
  class ToInt < Blank
    @__value__: Integer

    # Creates a new instance; any additional arguments or block are passed to {Blank#initialize}.
    #
    # @rbs (Integer, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void
    def initialize: (Integer, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void

    # : () -> Integer
    def to_int: () -> Integer
  end

  # A Class which exclusively defines +#to_s+; it implements RBS's +_ToS+ interface.
  class ToS < Blank
    @__value__: String

    # Creates a new instance; any additional arguments or block are passed to {Blank#initialize}.
    #
    # @rbs (String, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void
    def initialize: (String, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void

    # : () -> String
    def to_s: () -> String
  end

  # A Class which exclusively defines +#to_str+; it implements RBS's +_ToStr+ interface.
  class ToStr < Blank
    @__value__: String

    # Creates a new instance; any additional arguments or block are passed to {Blank#initialize}.
    #
    # @rbs (String, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void
    def initialize: (String, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void

    # : () -> String
    def to_str: () -> String
  end

  # A Class which exclusively defines +#to_a+; it implements RBS's +_ToA[T]+ interface.
  #
  # @rbs generic unchecked out T -- Type of elements
  class ToA[unchecked out T] < Blank
    @__value__: Array[T]

    # Creates a new instance; any additional arguments or block are passed to {Blank#initialize}.
    #
    # @rbs (Array[T], ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void
    def initialize: (Array[T], ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void

    # : () -> Array[T]
    def to_a: () -> Array[T]
  end

  # A Class which exclusively defines +#to_ary+; it implements RBS's +_ToAry[T]+ interface.
  #
  # @rbs generic unchecked out T -- Type of elements
  class ToAry[unchecked out T] < Blank
    @__value__: Array[T]

    # Creates a new instance; any additional arguments or block are passed to {Blank#initialize}.
    #
    # @rbs (Array[T], ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void
    def initialize: (Array[T], ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void

    # : () -> Array[T]
    def to_ary: () -> Array[T]
  end

  # A Class which exclusively defines +#to_h+; it implements RBS's +_ToH[K, V]+ interface.
  #
  # @rbs generic unchecked out K -- Type of Key
  # @rbs generic unchecked out V -- Type of Value
  class ToH[unchecked out K, unchecked out V] < Blank
    @__value__: Hash[K, V]

    # Creates a new instance; any additional arguments or block are passed to {Blank#initialize}.
    #
    # @rbs (Hash[K, V], ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void
    def initialize: (Hash[K, V], ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void

    # : () -> Hash[K, V]
    def to_h: () -> Hash[K, V]
  end

  # A Class which exclusively defines +#to_hash+; it implements RBS's +_ToHash[K, V]+ interface.
  #
  # @rbs generic unchecked out K -- Type of Key
  # @rbs generic unchecked out V -- Type of Value
  class ToHash[unchecked out K, unchecked out V] < Blank
    @__value__: Hash[K, V]

    # Creates a new instance; any additional arguments or block are passed to {Blank#initialize}.
    #
    # @rbs (Hash[K, V], ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void
    def initialize: (Hash[K, V], ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void

    # : () -> Hash[K, V]
    def to_hash: () -> Hash[K, V]
  end

  # A Class which exclusively defines +#to_sym+; it implements RBS's +_ToSym+ interface.
  class ToSym < Blank
    @__value__: Symbol

    # Creates a new instance; any additional arguments or block are passed to {Blank#initialize}.
    #
    # @rbs (Symbol, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void
    def initialize: (Symbol, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void

    # : () -> Symbol
    def to_sym: () -> Symbol
  end

  # A Class which exclusively defines +#to_r+; it implements RBS's +_ToR+ interface.
  class ToR < Blank
    @__value__: Rational

    # Creates a new instance; any additional arguments or block are passed to {Blank#initialize}.
    #
    # @rbs (Rational, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void
    def initialize: (Rational, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void

    # : () -> Rational
    def to_r: () -> Rational
  end

  # A Class which exclusively defines +#to_c+; it implements RBS's +_ToC+ interface.
  class ToC < Blank
    @__value__: Complex

    # Creates a new instance; any additional arguments or block are passed to {Blank#initialize}.
    #
    # @rbs (Complex, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void
    def initialize: (Complex, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void

    # : () -> Complex
    def to_C: () -> Complex
  end

  # A Class which exclusively defines +#to_f+; it implements RBS's +_ToF+ interface.
  class ToF < Blank
    @__value__: Float

    # Creates a new instance; any additional arguments or block are passed to {Blank#initialize}.
    #
    # @rbs (Float, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void
    def initialize: (Float, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void

    # : () -> Float
    def to_f: () -> Float
  end

  # A Class which exclusively defines +#to_regexp+; it implements RBS's +Regexp::_ToRegexp+ interface.
  class ToRegexp < Blank
    @__value__: Regexp

    # Creates a new instance; any additional arguments or block are passed to {Blank#initialize}.
    #
    # @rbs (Regexp, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void
    def initialize: (Regexp, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void

    # : () -> Regexp
    def to_regexp: () -> Regexp
  end

  # A Class which exclusively defines +#to_path+; it implements RBS's +_ToPath+ interface.
  class ToPath < Blank
    @__value__: String

    # Creates a new instance; any additional arguments or block are passed to {Blank#initialize}.
    #
    # @rbs (String, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void
    def initialize: (String, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void

    # : () -> String
    def to_path: () -> String
  end

  # A Class which exclusively defines +#to_io+; it implements RBS's +_ToIO+ interface.
  class ToIO < Blank
    @__value__: IO

    # Creates a new instance; any additional arguments or block are passed to {Blank#initialize}.
    #
    # @rbs (IO, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void
    def initialize: (IO, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void

    # : () -> IO
    def to_io: () -> IO
  end

  # A Class which exclusively defines +#to_proc+; it implements RBS's +_ToProc+ interface.
  class ToProc < Blank
    @__value__: Proc

    # Creates a new instance; any additional arguments or block are passed to {Blank#initialize}.
    #
    # @rbs (Proc, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void
    def initialize: (Proc, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void

    # : () -> Proc
    def to_proc: () -> Proc
  end

  # A Class which defines `#begin`, `#end`, and `#exclude_end?`. It implements RBS's +_Range[T]+
  # interface.
  #
  # @rbs generic out T -- Type to iterate over
  class Range[out T] < Blank
    @begin: T?

    @end: T?

    @exclude_end: bool

    # Creates a new instance; any additional arguments or block are passed to {Blank#initialize}.
    #
    # @rbs (T?, T?, ?bool, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void
    def initialize: (T?, T?, ?bool, ?methods: Array[interned], ?hash: bool) ?{ () [self: instance] -> void } -> void

    # : () -> T?
    def begin: () -> T?

    # : () -> T?
    def end: () -> T?

    # : () -> bool
    def exclude_end?: () -> bool
  end
end
